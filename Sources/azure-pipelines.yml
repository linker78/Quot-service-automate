
# Advanced Azure DevOps Pipeline for .NET 8 Quote Service Project
# Features: Multi-stage, code analysis, test coverage, artifact versioning, environment-based deployment

trigger:
  branches:
    include:
      - main
      - develop

pr:
  branches:
    include:
      - main
      - develop

variables:
  buildConfiguration: 'Release'
  solution: '**/Quote.sln'
  testProjects: '**/*UnitTests.csproj'
  apiProject: 'Quote.Solution/Quote/Quote.csproj'
  artifactName: 'drop'

stages:
  - stage: Build
    displayName: 'Build and Analyze'
    jobs:
      - job: Build
        displayName: 'Build Job'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET 8 SDK'
            inputs:
              packageType: 'sdk'
              version: '8.x'

          - task: NuGetToolInstaller@1
            displayName: 'Install NuGet'

          - task: NuGetCommand@2
            displayName: 'Restore NuGet packages'
            inputs:
              restoreSolution: '$(solution)'

          - task: DotNetCoreCLI@2
            displayName: 'Build Solution'
            inputs:
              command: 'build'
              projects: '$(solution)'
              arguments: '--configuration $(buildConfiguration)'

          - task: SonarCloudPrepare@1
            displayName: 'Prepare SonarCloud analysis'
            inputs:
              SonarCloud: '$(SONARCLOUD_SERVICE_CONNECTION)'
              organization: '$(SONARCLOUD_ORGANIZATION)'
              scannerMode: 'MSBuild'
              projectKey: '$(SONARCLOUD_PROJECT_KEY)'
              projectName: 'QuoteService'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - stage: Test
    displayName: 'Test and Analyze'
    dependsOn: Build
    jobs:
      - job: Test
        displayName: 'Test Job'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              projects: '$(testProjects)'
              arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/TestResults/*.trx'
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage Results'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

          - task: SonarCloudAnalyze@1
            displayName: 'Run SonarCloud analysis'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          - task: SonarCloudPublish@1
            displayName: 'Publish SonarCloud results'
            inputs:
              pollingTimeoutSec: '300'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - stage: Publish
    displayName: 'Publish Artifacts'
    dependsOn: Test
    jobs:
      - job: Publish
        displayName: 'Publish Job'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Publish API Project'
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(artifactName)'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy to Azure'
    dependsOn: Publish
    jobs:
      - deployment: DeployWeb
        displayName: 'Deploy Web App'
        environment: 'production'
        pool:
          vmImage: 'windows-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: '$(AZURE_SUBSCRIPTION)'
                    appType: 'webApp'
                    appName: '$(AZURE_WEBAPP_NAME)'
                    package: '$(Pipeline.Workspace)/$(artifactName)/*.zip'
