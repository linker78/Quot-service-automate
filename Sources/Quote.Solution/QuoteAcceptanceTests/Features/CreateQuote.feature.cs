// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuoteAcceptanceTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CreateQuoteFeatureFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "CreateQuoteFeature", "This feature is about create new quotes in the Quote Service", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "CreateQuote.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("create a new quote with one item for a customer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithOneItemForACustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("create a new quote with one item for a customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table1.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "1",
                            "10.0",
                            "null"});
                table1.AddRow(new string[] {
                            "Jane Smith",
                            "Tablet",
                            "2",
                            "20.0",
                            "null"});
#line 8
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table1, "Given ");
#line hidden
#line 12
    await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
    await testRunner.ThenAsync("it returns quotes with the correct details and a confirmation message \"Quote crea" +
                        "ted successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("create a new quote with one item with discount for a customer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithOneItemWithDiscountForACustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("create a new quote with one item with discount for a customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table2.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "1",
                            "10.0",
                            "2.0"});
                table2.AddRow(new string[] {
                            "Jane Smith",
                            "Tablet",
                            "2",
                            "20.0",
                            "5.0"});
#line 17
    await testRunner.GivenAsync("the following quote details:", ((string)(null)), table2, "Given ");
#line hidden
#line 21
    await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
    await testRunner.ThenAsync("it returns quotes with the correct details and a confirmation message \"Quote crea" +
                        "ted successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("create a new quote with two items for a customer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithTwoItemsForACustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("create a new quote with two items for a customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table3.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "1",
                            "10.0",
                            "null"});
                table3.AddRow(new string[] {
                            "John Doe",
                            "Mouse",
                            "2",
                            "5.0",
                            "null"});
#line 26
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table3, "Given ");
#line hidden
#line 30
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
 await testRunner.ThenAsync("it returns quotes with the correct details and a confirmation message \"Quote crea" +
                        "ted successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("create a new quote with zero quantity for an item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithZeroQuantityForAnItem()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("create a new quote with zero quantity for an item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table4.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "0",
                            "10.0",
                            "null"});
#line 35
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table4, "Given ");
#line hidden
#line 38
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.ThenAsync("it returns quotes with the correct details and a confirmation message \"Quote crea" +
                        "ted successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("create a new quote with maximum quantity for an item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithMaximumQuantityForAnItem()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("create a new quote with maximum quantity for an item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table5.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "1000",
                            "10.0",
                            "null"});
#line 43
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table5, "Given ");
#line hidden
#line 46
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
 await testRunner.ThenAsync("it returns quotes with the correct details and a confirmation message \"Quote crea" +
                        "ted successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("create a new quote with negative quantity for an item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithNegativeQuantityForAnItem()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("create a new quote with negative quantity for an item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table6.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "-1",
                            "10.0",
                            "null"});
#line 51
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table6, "Given ");
#line hidden
#line 54
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
 await testRunner.ThenAsync("it returns quotes with the correct details and a confirmation message \"Quote crea" +
                        "ted successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new quote with missing customer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithMissingCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new quote with missing customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table7.AddRow(new string[] {
                            "",
                            "Laptop",
                            "1",
                            "10.0",
                            "null"});
#line 59
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table7, "Given ");
#line hidden
#line 62
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
 await testRunner.ThenAsync("it returns an error message \"Customer or Items cannot be null or empty\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new quote with missing item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithMissingItem()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new quote with missing item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table8.AddRow(new string[] {
                            "John Doe",
                            "",
                            "1",
                            "10.0",
                            "null"});
#line 67
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table8, "Given ");
#line hidden
#line 70
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
 await testRunner.ThenAsync("it returns an error message \"Cannot create the quote for a null item.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new quote with invalid customer name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithInvalidCustomerName()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new quote with invalid customer name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table9.AddRow(new string[] {
                            "12345",
                            "Laptop",
                            "1",
                            "10.0",
                            "null"});
#line 75
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table9, "Given ");
#line hidden
#line 78
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 79
 await testRunner.ThenAsync("it returns an error message \"Customer name is invalid.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new quote with invalid discount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithInvalidDiscount()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new quote with invalid discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table10.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "1",
                            "10.0",
                            "-5%"});
#line 83
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table10, "Given ");
#line hidden
#line 86
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
 await testRunner.ThenAsync("it returns a validation error containing \"\'%\' is an invalid end of a number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new quote with invalid price")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithInvalidPrice()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new quote with invalid price", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table11.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "1",
                            "-10.0",
                            "null"});
#line 91
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table11, "Given ");
#line hidden
#line 94
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 95
 await testRunner.ThenAsync("it returns a validation error containing \"Price must be greater than or equal to " +
                        "zero.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new quote with minium quantity and price")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CreateQuoteFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CreateQuote")]
        public async global::System.Threading.Tasks.Task CreateANewQuoteWithMiniumQuantityAndPrice()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateQuote"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new quote with minium quantity and price", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "customer",
                            "item",
                            "quantity",
                            "price",
                            "discount"});
                table12.AddRow(new string[] {
                            "John Doe",
                            "Laptop",
                            "1",
                            "0,01",
                            "null"});
#line 99
 await testRunner.GivenAsync("the following quote details:", ((string)(null)), table12, "Given ");
#line hidden
#line 102
 await testRunner.WhenAsync("I create quotes for those customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 103
 await testRunner.ThenAsync("it returns quotes with the correct details and a confirmation message \"Quote crea" +
                        "ted successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
